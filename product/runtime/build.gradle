import com.chaquo.python.internal.BuildCommon;
import com.chaquo.python.internal.Common;
import static com.chaquo.python.internal.Common.findExecutable;
import static com.chaquo.python.internal.Common.osName;

group = "com.chaquo.python.runtime"


String hostPythonExe() {
    return findExecutable("python$Common.DEFAULT_PYTHON_VERSION")
}

String hostPythonHome() {
    return new ByteArrayOutputStream().withStream { output ->
        exec {
            executable hostPythonExe()
            args "-c", "import sys; print(sys.base_prefix)"
            standardOutput = output
        }
        return output.toString().trim()
    }
}

void addArtifact(TaskProvider task, File f, String pyVersion, String abi=null) {
    def dotPos = f.name.lastIndexOf(".")
    def dashPos = f.name.indexOf("-")
    def name = f.name.substring(0, (dashPos != -1) ? dashPos : dotPos)

    Provider<MavenPublication> pub
    try {
        pub = publishing.publications.named(name, MavenPublication)
    } catch (UnknownDomainObjectException e) {
        pub = publishing.publications.register(name, MavenPublication)
    }
    pub.configure {
        artifactId = name
        artifact(f) {
            builtBy task
            classifier = pyVersion
            if (abi != null) {
                classifier += "-$abi"
            }
            extension f.name.substring(dotPos + 1)
        }
    }
}

sourceSets.main.java.srcDirs += ["../buildSrc/src/main/java"]
sourceCompatibility = 7
publishing {
    publications {
        chaquopy_java(MavenPublication) {
            artifactId name
            from components.java
        }
    }
}


Common.PYTHON_VERSIONS_SHORT.each { pyVersion ->
    def compilePython = tasks.register("compilePython-$pyVersion", Copy) {
        group = "build"
        doFirst {
            delete(destinationDir)
            mkdir(destinationDir)
        }
        from "src/main/python"
        into "$buildDir/$Common.ASSET_BOOTSTRAP/$pyVersion"
        include "**/*.py"
        include "**/*.dist-info/**"  // For license files

        includeEmptyDirs false
        doLast {
            exec {
                workingDir destinationDir
                if (osName() == "windows") {
                    commandLine findExecutable("py"), "-$pyVersion"
                } else {
                    commandLine findExecutable("python$pyVersion")
                }
                args "-m", "compileall"
                args "-q", "-b", "."
            }
            delete fileTree(destinationDir) {
                include "**/*.py"
            }
        }
    }

    def zipFile = new File(
        "$buildDir/${Common.ASSET_BOOTSTRAP}",
        Common.assetZip("$Common.ASSET_BOOTSTRAP-$pyVersion")
    )
    def zipPython = tasks.register("zipPython-$pyVersion", Zip) {
        group = "build"
        from compilePython
        destinationDirectory = zipFile.parentFile
        archiveFileName = zipFile.name
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
    addArtifact(zipPython, zipFile, pyVersion)
}

String sdkPath(String path) {
    def absPath = "${BuildCommon.androidHome(project)}/$path"
    if (!file(absPath).exists()) {
        throw new GradleException("$path not found: install it using the SDK Manager")
    }
    return absPath
}

// On Windows, some of the Python unit tests don't work on Java 11 yet (#1200). This
// variable does not affect the Java unit tests, which always use the same Java as
// Gradle itself.
def javaHome = BuildCommon.localProperty(project, 'chaquopy.java.home.8')

def docs = tasks.register("docs") {
    group = "documentation"
    dependsOn("javadoc")
}

javadoc {
    destinationDir = file("$docsDir/java")
    title "Chaquopy Java API"
    exclude "com/chaquo/python/internal/**"
    options {
        addStringOption("source", "8")
        addBooleanOption("Xdoclint:all,-missing", true)
        addBooleanOption("nodeprecated", true)
        addStringOption("link", "https://developer.android.com/reference/")
    }
}

TaskProvider cythonTask(String name, Closure closure) {
    return tasks.register(name, Exec) {
        group = "build"
        configure(closure)

        def pyxFiles = inputs.files.findAll { it.name.endsWith(".pyx") }
        assert(pyxFiles.size() == 1)
        def inFile = pyxFiles.get(0)
        def stem = inFile.name.substring(0, inFile.name.length() - ".pyx".length())
        def outDir = "$buildDir/cython"
        def outFile = "$outDir/${stem}.c"
        outputs.file outFile

        workingDir inFile.parent  // Reduce clutter in exception traces
        executable findExecutable("cython")
        args "-Wextra", "-Werror", inFile.name, "-I", outDir, "-o", outFile

        doLast {
            String[][] replacements = [
                // All functions called directly by the JVM must be declared JNICALL
                // JNIEXPORT. JNIEXPORT should be equivalent to Cython's "cdef public",
                // but JNICALL does make a difference on some platforms including x86.
                // So alter the generated C code to add it.
                [/^__PYX_EXTERN_C (\w+)/,
                 '/* cythonTask altered */ __PYX_EXTERN_C JNIEXPORT $1 JNICALL'],

                // Workaround for https://github.com/cython/cython/issues/3725.
                [/__pyx_insert_code_object\(c_line/,
                 '// cythonTask disabled: $0'],
            ]
            def cFile = outputs.files.getSingleFile()
            def tmpFile = new File("${cFile}.tmp")
            tmpFile.withWriter { writer ->
                for (line in cFile.readLines()) {
                    for (r in replacements) {
                        line = line.replaceAll(r[0], r[1])
                    }
                    writer.write(line + "\n")
                }
            }
            if (! (cFile.delete() && tmpFile.renameTo(cFile))) {
                throw new GradleException("Failed to replace $cFile")
            }
        }
    }
}

cythonTask("cythonPython") {
    inputs.files fileTree("$projectDir/src/main/python/java") {
        include "chaquopy.pyx", "*.pxi", "*.pxd"
    }
}
cythonTask("cythonJava") {
    inputs.files fileTree("$projectDir/src/main/python") {
        include "chaquopy_java.pyx", "java/*.pxd"
    }
}

def sdkCmakeDir = sdkPath("cmake/3.22.1")
def androidJar = "${sdkPath("platforms/android-" + Common.COMPILE_SDK_VERSION)}/android.jar"

dependencies {
    compileOnly files(androidJar)
    implementation 'org.jetbrains:annotations-java5:15.0'

    testCompileOnly files(androidJar)
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

def proxyTask = tasks.register("generateStaticProxy", Exec) {
    group = "verification"
    def outputDir = "$buildDir/static_proxy"
    outputs.dir(outputDir)
    outputs.upToDateWhen { false }
    doFirst { delete outputDir }
    environment "PYTHONPATH", "$projectDir/../gradle-plugin/src/main/python"
    executable hostPythonExe()
    args "-m", "chaquopy.static_proxy"
    args "--path", "$projectDir/src/test/python"
    args "--java", outputDir
    args("chaquopy.test.static_proxy.basic", "chaquopy.test.static_proxy.header",
         "chaquopy.test.static_proxy.method")
}
sourceSets.test.java.srcDir(proxyTask)

// CMakeLists.txt may contain configuration-specific settings, so make sure we only use
// one of the known configurations.
String cmakeBuildType = findProperty("cmakeBuildType") ?: "Debug"
def KNOWN_BUILD_TYPES = ["Debug", "Release"]
if (!(cmakeBuildType in KNOWN_BUILD_TYPES)) {
    throw new GradleException(
        "Unknown build type '$cmakeBuildType'; valid values are $KNOWN_BUILD_TYPES")
}

(["host"] + Common.supportedAbis("3.11")).each { abi ->
    def pyVersions = Common.PYTHON_VERSIONS_SHORT.findAll {
        Common.supportedAbis(it).contains(abi)
    }
    def pyLibSuffix = ".so"
    def cmakeBuildSubdir = "$buildDir/cmake/$abi"
    def cmake = tasks.register("cmake-$abi", Exec) {
        group = "build"
        dependsOn("cythonPython", "cythonJava")
        inputs.files "CMakeLists.txt"
        // This is not a complete list of the outputs, but it's enough to detect when the
        // directory has been deleted. We can't declare the whole directory as an output,
        // because the cmakeBuild task outputs to the same place.
        outputs.files "$cmakeBuildSubdir/build.ninja", "$cmakeBuildSubdir/rules.ninja",
                      "$cmakeBuildSubdir/CMakeCache.txt"
        doFirst {
            // This is the only reliable way to pick up changes to args. For example,
            // attempting to change CMAKE_TOOLCHAIN_FILE in an existing build tree will be
            // silently ignored.
            delete cmakeBuildSubdir
            mkdir cmakeBuildSubdir
        }
        workingDir cmakeBuildSubdir
        executable "$sdkCmakeDir/bin/cmake"
        args "-GNinja", "-DCMAKE_MAKE_PROGRAM=$sdkCmakeDir/bin/ninja",
             "-DCMAKE_BUILD_TYPE=$cmakeBuildType",
             "-DCHAQUOPY_SRC_DIR=build/cython"

        if (abi == "host") {
            String javaIncludeSubdir
            if (osName() == "windows") {
                pyLibSuffix = ".pyd"
                javaIncludeSubdir = "win32"
            } else if (osName() == "mac") {
                javaIncludeSubdir = "darwin"
            } else {
                javaIncludeSubdir = osName()
            }
            args "-DCHAQUOPY_PYTHON_VERSION=$Common.DEFAULT_PYTHON_VERSION"
            args "-DCHAQUOPY_LIB_DIRS=${hostPythonHome()}/lib"
            args "-DCHAQUOPY_INCLUDE_PYTHON=${hostPythonHome()}/include"
            args ("-DCHAQUOPY_INCLUDE_JAVA=$javaHome/include;" +
                  "$javaHome/include/$javaIncludeSubdir")
        } else {
            String ndkDir = null
            def androidEnvFile = file("../../target/android-env.sh").absoluteFile
            for (line in androidEnvFile.readLines()) {
                def match = line =~ /ndk_version=(\S+)/
                if (match) {
                    ndkDir = sdkPath("ndk/${match.group(1)}")
                    break
                }
            }
            if (ndkDir == null) {
                throw new GradleException("Failed to find NDK version in $androidEnvFile")
            }

            def prefixDir = "$projectDir/../../target/prefix/$abi"
            args "-DCMAKE_TOOLCHAIN_FILE=$ndkDir/build/cmake/android.toolchain.cmake",
                 "-DANDROID_ABI=$abi",
                 "-DANDROID_NATIVE_API_LEVEL=$Common.MIN_SDK_VERSION",
                 "-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON",
                 "-DCHAQUOPY_PYTHON_VERSIONS=${pyVersions.join(';')}",
                 "-DCHAQUOPY_INCLUDE_PYTHON=$prefixDir/include",
                 "-DCHAQUOPY_LIB_DIRS=$prefixDir/lib"
        }
        args "-DCHAQUOPY_PY_SUFFIX=$pyLibSuffix",
             projectDir
    }

    def cmakeBuild = tasks.register("cmakeBuild-$abi", Exec) {
        // No inputs or outputs: the command itself determines whether it's up to date.
        group = "build"
        dependsOn cmake
        executable "$sdkCmakeDir/bin/cmake"

        // Ninja's parallel build defaults to the number of processors plus 2, which
        // overloads the GitHub Actions runner.
        args "--build", cmakeBuildSubdir,
             "--parallel", Runtime.getRuntime().availableProcessors()
    }
    if (abi != "host") {
        for (name in ["chaquopy", "libchaquopy_java"]) {
            for (pyVersion in pyVersions) {
                addArtifact(
                    cmakeBuild, new File(cmakeBuildSubdir, "$name-${pyVersion}.so"),
                    pyVersion, abi)
            }
        }
    }

    if (abi == "host") {
        def mainPythonDir = "$projectDir/src/main/python"
        def testPythonDir = "$projectDir/src/test/python"
        tasks.register("setupPythonPath") {
            group = "verification"
            dependsOn cmakeBuild
            doFirst {
                copy {
                    into mainPythonDir
                    from(cmakeBuildSubdir) {
                        include "chaquopy${pyLibSuffix}"
                        into "java"
                    }
                }
            }
        }

        def hostConfig = {
            dependsOn("setupPythonPath", "compileTestJava")
            environment "CLASSPATH", sourceSets.test.runtimeClasspath.asPath

            // Can't use -Djava.library.path because we need something which also works
            // for Python processes.
            def pathVar = (osName() == "windows") ? "PATH"
                          : (osName() == "mac") ? "DYLD_LIBRARY_PATH"
                          : "LD_LIBRARY_PATH"
            environment pathVar, (cmakeBuildSubdir + File.pathSeparator +
                                  (System.getenv(pathVar) ?: ""))
            environment "PYTHONPATH", mainPythonDir + File.pathSeparator + testPythonDir
        }

        // For consistency with Android demo app, run via test suite rather than using
        // "discover".
        tasks.register("testPython", Exec) {
            group = "verification"
            configure(hostConfig)
            workingDir "$projectDir/src/test/python"
            environment "JAVA_HOME", javaHome
            executable hostPythonExe()
            args "-m", "unittest"
            if (project.hasProperty("testPythonArgs")) {
                args project.testPythonArgs.split(" ")
            } else {
                args "chaquopy.test"
            }
        }

        compileTestJava {
            sourceCompatibility = "1.8"
            targetCompatibility = "1.8"
        }

        // Run via test suite for consistency with Android demo app. (NOTE: this will not show
        // test results within IntelliJ for some reason.)
        test.exclude "**"  // Disable the default test task
        tasks.register("testJava", Test) {
            group = "verification"
            configure(hostConfig)
            outputs.upToDateWhen { false }
            environment "PYTHONHOME", hostPythonHome()
            if (osName() == "linux") {
                // libchaquopy_java.so is linked against libpython, but that doesn't add
                // the libpython symbols to the global scope, which is required in order to
                // load native modules like ctypes. Loading libpython with
                // System.loadLibrary doesn't help: presumably it uses RTLD_LOCAL on
                // Linux. Altering chaquopy_java to call dlopen with RTLD_GLOBAL would be
                // the proper solution, but let's do it the easy way for now. See #1201.
                environment(
                    "LD_PRELOAD",
                    "/usr/lib/x86_64-linux-gnu/libpython${Common.DEFAULT_PYTHON_VERSION}.so"
                )
            }
            testClassesDirs = sourceSets.test.output.classesDirs
            scanForTestClasses = false
            include "**/TestSuite.class"
            testLogging {
                exceptionFormat = 'full'
                showStandardStreams = true
            }
        }
        tasks.named("check") {
            dependsOn("testPython", "testJava")
        }

        // Generates a script to start a Python REPL with Java and Python paths set up.
        tasks.register("consoleScript") {
            dependsOn("setupPythonPath")
            doLast {
                def writer = new PrintWriter("$projectDir/console.sh")
                writer.println "#!/bin/bash -e"
                writer.println "# Generated by Gradle consoleScript task"
                def env = testPython.environment
                for (String key : ["CLASSPATH", "PYTHONPATH"]) {
                    writer.println "export $key='${env.get(key)}'"
                }
                writer.println "export PATH=\"$cmakeBuildSubdir${File.pathSeparator}" + '$PATH"'
                writer.println "winpty ${hostPythonExe()} " + '"$@"'
                writer.close()
            }
        }

        // Requires the Python packages in requirements-docs.txt.
        tasks.register("sphinx", Exec) {
            group = "documentation"
            configure(hostConfig)

            // We call a specific Python executable rather than running `sphinx-build`,
            // because Sphinx needs to be able to import the runtime module.
            executable hostPythonExe()
            args("-m", "sphinx", "-v", "-W", "--keep-going", "-b", "html",
                 "docs/sphinx", docsDir)
            environment "JAVA_HOME", javaHome
        }
        docs.configure {
            dependsOn("sphinx")
        }
    }
}
