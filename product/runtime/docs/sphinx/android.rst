.. highlight:: kotlin

Gradle plugin
#############

Chaquopy is distributed as a plugin for Android's Gradle-based build system. It can be
used in an Android appplication module (`com.android.application`), or an `Android
library module <https://developer.android.com/studio/projects/android-library>`_
(`com.android.library`).

The Chaquopy plugin can only be used in one module per app: either in the app module, or
in exactly one library module. If you use it in multiple modules, the build may fail,
and even if it succeeds, only one module's Python code will be included in the app.


Project setup
=============

.. _android-plugin:

Gradle plugin
-------------

The following instructions use the `plugins` syntax. If your project uses the
previous `buildscript` and `apply` syntax, follow the instructions `here
<../10.0/android.html#android-plugin>`_, but replace the Chaquopy version number with
the current one shown below.

In your project's `settings.gradle` file, find the `pluginManagement` repositories list,
and make sure it includes `mavenCentral()`. If your project was generated by a recent
version of Android Studio, this line should already be there.

In your *top-level* `build.gradle` file, set the Chaquopy version:

.. parsed-literal::
    plugins {
        id("com.chaquo.python") version "|release|" apply false
    }

Also check the Android Gradle plugin version (`com.android.application` or
`com.android.library`): it should be between 7.0.x and 8.7.x. Older versions are
supported by :doc:`older versions of Chaquopy <../versions>`. Newer versions may work,
but have not been tested.

Then apply the Chaquopy plugin in the *module-level* `build.gradle` file (usually in the
`app` directory)::

    plugins {
        id("com.chaquo.python")
    }

.. _android-minsdk:

`minSdk`
--------

Your project's `minSdk
<https://developer.android.com/reference/tools/gradle-api/8.1/com/android/build/api/dsl/BaseFlavor#minSdk()>`_
must be at least 24. Older versions are supported by :doc:`older versions of Chaquopy
<../versions>`.

.. _android-abis:

`abiFilters`
------------

The Python interpreter is a native component, so you must use the `abiFilters
<https://developer.android.com/studio/projects/gradle-external-native-builds#specify-abi>`_
setting to specify which ABIs you want the app to support. The currently available ABIs are:

* `armeabi-v7a` for older Android devices (Python 3.11 and older only)
* `arm64-v8a` for current Android devices, and emulators on Apple silicon
* `x86` for older emulators (Python 3.11 and older only)
* `x86_64` for current emulators

The following setting will work for most projects:

.. tabs::

    .. code-tab:: kotlin

        android {
            defaultConfig {
                ndk {
                    // On Apple silicon, you can omit x86_64.
                    abiFilters += listOf("arm64-v8a", "x86_64")
                }
            }
        }

    .. code-tab:: groovy

        android {
            defaultConfig {
                ndk {
                    // On Apple silicon, you can omit x86_64.
                    abiFilters "arm64-v8a", "x86_64"
                }
            }
        }

There's no need to actually install the NDK, as all of Chaquopy's native libraries are already
pre-compiled and stripped.

Each ABI will add several MB to the size of the app, plus the size of any native
:ref:`requirements <android-requirements>`. If you find this makes your app too large, see
:ref:`the FAQ <faq-size>`.

`chaquopy` block
----------------

.. note:: There is also a deprecated DSL which is available in Groovy build.gradle files
   only. For details, see the `Chaquopy 14 documentation <../14.0/android.html>`_.

All of the Chaquopy plugin's settings are configured with the `chaquopy` block in
your module-level build.gradle file. Its structure is similar to the `android` block::

    chaquopy {
        defaultConfig { }
        productFlavors { }
        sourceSets { }
    }

The examples below will use `defaultConfig`, but every setting can also appear within a
`product flavor
<https://developer.android.com/studio/build/build-variants#product-flavors>`_. For
example, here's how to create flavors for different :ref:`Python versions
<python-version>`:

.. tabs::

    .. code-tab:: kotlin

        android {
            flavorDimensions += "pyVersion"
            productFlavors {
                create("py310") { dimension = "pyVersion" }
                create("py311") { dimension = "pyVersion" }
            }
        }
        chaquopy {
            productFlavors {
                getByName("py310") { version = "3.10" }
                getByName("py311") { version = "3.11" }
            }
        }

    .. code-tab:: groovy

        android {
            flavorDimensions "pyVersion"
            productFlavors {
                create("py310") { dimension = "pyVersion" }
                create("py311") { dimension = "pyVersion" }
            }
        }
        chaquopy {
            productFlavors {
                getByName("py310") { version = "3.10" }
                getByName("py311") { version = "3.11" }
            }
        }


.. _buildPython:

buildPython
-----------

Some features require Python 3.8 or later to be available on the build machine. These
features are indicated by a note in their documentation sections.

By default, Chaquopy will try to find Python on the PATH with the standard command for your
operating system, first with a matching minor version, and then with a matching major version.
For example, if :ref:`your app's Python version <python-version>` is 3.8, then:

* On Linux and Mac it will try `python3.8`, then `python3`.
* On Windows, it will try `py -3.8`, then `py -3`.
* On all platforms, it will finally try `python`.

If this doesn't work for you, set your Python command using the `buildPython` setting.
For example, on Windows you might use one of the following::

    chaquopy {
        defaultConfig {
            buildPython("C:/path/to/python.exe")
            buildPython("C:/path/to/py.exe", "-3.8")
        }
    }


Development
===========

.. _android-startup:

Startup
-------

Before your app can run any Python code, you must call `Python.start()
<java/com/chaquo/python/Python.html#start(com.chaquo.python.Python.Platform)>`_.
There are two basic ways to achieve this:

If the app always uses Python, then call Python.start() from a location which is guaranteed
to run exactly once per process, such as `Application.onCreate()
<https://developer.android.com/reference/android/app/Application.html#onCreate()>`_. The
easiest way to do this is to use `PyApplication
<java/com/chaquo/python/android/PyApplication.html>`_, or your own subclass of it. Simply
add the following attribute to the `<application>` element in `AndroidManifest.xml`:

.. code-block:: xml

    android:name="com.chaquo.python.android.PyApplication"

Alternatively, if the app only sometimes uses Python, then call Python.start() after first
checking whether it's already been started:

.. code-block:: java

    // "context" must be an Activity, Service or Application object from your app.
    if (! Python.isStarted()) {
        Python.start(new AndroidPlatform(context));
    }

.. _python-version:

Python version
--------------

You can set your app's Python version like this::

    chaquopy {
        defaultConfig {
            version = "3.8"
        }
    }

In :doc:`this version of Chaquopy <../versions>`, the default Python version is 3.8. The
other available versions are 3.9, 3.10, 3.11, 3.12 and 3.13, but these may have fewer
:ref:`packages <android-requirements>` available.

.. _android-source:

Source code
-----------

By default, Chaquopy will look for Python source code in the `python` subdirectory of
each `source set <https://developer.android.com/studio/build/index.html#sourcesets>`_.
This means the default Python source directory is `src/main/python`.

To include Python code from other directories, use the `chaquopy.sourceSets` block. For
example::

    chaquopy {
        sourceSets {
            getByName("main") {
                srcDir("some/other/dir")
            }
        }
    }

The `setRoot
<https://developer.android.com/reference/tools/gradle-api/8.1/com/android/build/api/dsl/AndroidSourceSet#setroot>`_
method only takes effect on the standard Android directories. If you want to set the
Python root to the same place, you must do so explicitly, e.g.:

.. tabs::

    .. code-tab:: kotlin

        android {
            sourceSets.getByName("main") {
                setRoot("some/other/main")
            }
        }
        chaquopy {
            sourceSets.getByName("main") {
                setSrcDirs(listOf("some/other/main/python"))
            }
        }

    .. code-tab:: groovy

        android {
            sourceSets.getByName("main") {
                setRoot("some/other/main")
            }
        }
        chaquopy {
            sourceSets.getByName("main") {
                srcDirs = ["some/other/main/python"]
            }
        }

`As with Java
<https://developer.android.com/studio/build/build-variants.html#sourceset-build>`_, it
is usually an error if the source directories for a given build variant include multiple
copies of the same filename. This is only permitted if the duplicate files are all
empty, such as may happen with `__init__.py`.

.. _android-requirements:

Requirements
------------

.. note:: This feature requires Python on the build machine, which can be configured with the
          :ref:`buildPython <buildPython>` setting.

External Python packages may be built into the app using the `pip` block.
Within this block, add `install` lines, which can take any of the forms accepted by `pip
install <https://pip.pypa.io/en/stable/cli/pip_install/>`_. For example::

    chaquopy {
        defaultConfig {
            pip {
                // A requirement specifier, with or without a version number:
                install("scipy")
                install("requests==2.24.0")

                // An sdist or wheel filename, relative to the project directory:
                install("MyPackage-1.2.3-py2.py3-none-any.whl")

                // A directory containing a setup.py, relative to the project
                // directory (must contain at least one slash):
                install("./MyPackage")

                // "-r"` followed by a requirements filename, relative to the
                // project directory:
                install("-r", "requirements.txt")
            }
        }
    }

Chaquopy can install almost all pure-Python packages, plus a large selection
of packages with native components. To see which native packages are currently
available, you can `browse the repository here <https://chaquo.com/pypi-13.1/>`_. To
add or update a package:

* Try to build it yourself by following `these instructions
  <https://github.com/chaquo/chaquopy/blob/master/server/pypi/README.md>`__.
* Search our `issue tracker <https://github.com/chaquo/chaquopy/issues>`__ for advice
  on the package, and create a new issue if necessary.

To pass options to `pip install`, give them as a comma-separated list to the `options`
method. For example::

    chaquopy {
        defaultConfig {
            pip {
                options("--extra-index-url", "https://example.com/private/repository")
                install("MyPackage==1.2.3")
            }
        }
    }

Any options in the `pip documentation <https://pip.pypa.io/en/stable/cli/pip_install/>`_ may be
used, except for those which relate to the target environment, such as `--target`, `--user` or
`-e`. If there are multiple `options` lines, they will be combined in the order given.

.. _static-proxy-generator:

Static proxy generator
----------------------

.. note:: This feature requires Python on the build machine, which can be configured with the
          :ref:`buildPython <buildPython>` setting.

The static proxy feature allows a Python class to extend a Java class, or to be referenced
directly in Java code or the `AndroidManifest.xml` file without going through the Java API.

To use this feature, write your Python classes using the syntax described in the
":ref:`static-proxy`" section, then declare the containing modules as follows::

    chaquopy {
        defaultConfig {
            staticProxy("module.one", "module.two")
        }
    }


Packaging
=========

.. _extractPackages:

extractPackages
---------------

At runtime, Python modules are usually loaded directly from the APK, and don’t exist as
separate files. If there are certain packages in your :ref:`source code <android-source>`
or :ref:`requirements <android-requirements>` which need to exist as separate files, you
can declare them like this::

    chaquopy {
        defaultConfig {
            extractPackages("package1", "package2.subpkg")
        }
    }

Each extracted file will slightly slow down your app's startup, so this setting should be
used on the deepest possible package.

.. _android-data:

Data files
----------

Any data files in your :ref:`source code <android-source>` and :ref:`requirements
<android-requirements>` will be automatically built into your app. You can read them at runtime
using a path relative to `__file__`.

For example, if the data file is in the same directory as the Python file:

.. code-block:: python

    from os.path import dirname, join
    filename = join(dirname(__file__), "filename.txt")

You can then pass this filename to :any:`open`, or any other function which reads a file.

If the data file and the Python file are in different directories, then change the path
accordingly. For example, if the Python file is `alpha/hello.py`, and the data file is
`bravo/filename.txt`, then replace `filename.txt` above with `../bravo/filename.txt`.

Unlike :ref:`Python modules <extractPackages>`, data files are always extracted onto the
filesystem at runtime. However, files stored within a top-level directory containing an
`__init__.py` file will not be extracted until the corresponding Python package is
imported. All other files will be extracted when Python starts.

Do not write any files to these directories at runtime, as they may be deleted when the app is
upgraded. Instead, write files to `os.environ["HOME"]`, as described in the ":ref:`android-os`"
section.

.. _android-bytecode:

Bytecode compilation
--------------------

.. note:: This feature requires Python on the build machine, which can be configured with the
          :ref:`buildPython <buildPython>` setting.

Your app will start up faster if its Python code is compiled to .pyc format, so this is
enabled by default.

If bytecode compilation succeeds, the original .py files will not be included in the APK,
unless they're covered by the :ref:`extractPackages <extractPackages>` setting. However,
this prevents source code text from appearing in stack traces, so during development you
may wish to disable it. There are individual settings for:

* `src`: :ref:`local source code <android-source>`
* `pip`: :ref:`requirements <android-requirements>`
* `stdlib`: the Python standard library

For example, to disable compilation of your local source code::

    chaquopy {
        defaultConfig {
            pyc {
                src = false
            }
        }
    }

In the case of `src` and `pip`, your :ref:`buildPython <buildPython>` must use the same
bytecode format as Chaquopy itself. Usually this means it must have the same minor version,
e.g. if :ref:`your app's Python version <python-version>` is 3.8, then `buildPython` can be
any version of Python 3.8.

If bytecode compilation fails, the build will continue with a warning, unless you've
explicitly set one of the `pyc` settings to `true`. Your app will still work, but its code will
have to be compiled on the target device, which means it will start up slower and use more
storage space.


Python standard library
=======================

Chaquopy supports the entire Python standard library, except as documented below. If you
discover a problem with any other module, please `let us know
<https://github.com/chaquo/chaquopy/issues>`_.

.. _stdlib-unsupported:

Unsupported modules
-------------------

The following modules are unsupported because they require OS features which aren't available
on Android:

* :any:`crypt`
* :any:`grp`
* :any:`nis`
* :any:`spwd`

The following modules are unsupported because they require libraries which we don't currently
include:

* :any:`curses`
* :any:`dbm.gnu`
* :any:`dbm.ndbm`
* :any:`readline`
* :any:`tkinter`
* :any:`turtle`

multiprocessing
---------------

Because Android doesn't support the System V IPC API, most of the :any:`multiprocessing`
APIs will fail with the error "This platform lacks a functioning sem_open
implementation" or "No module named '_multiprocessing'".

The simplest solution is to use :any:`multiprocessing.dummy` instead.

.. _android-os:

os
---

Don't pass a simple filename to functions which write a file, as this will try to write to the
current directory, which is usually read-only on Android. Instead, use a path relative to
`os.environ["HOME"]`, like this:

.. code-block:: python

    import os
    from os.path import join
    filename = join(os.environ["HOME"], "filename.txt")

You can then pass this filename to :any:`open`, or any other function which writes a file.

`os.environ["HOME"]` is set to your app's `internal storage directory
<https://developer.android.com/training/data-storage/app-specific>`_. Any files or
subdirectories created in this location will persist until the app is uninstalled.

If your app is `debuggable <https://developer.android.com/studio/debug#enable-debug>`_, you can
read and write this directory from Android Studio using the `Device File Explorer
<https://developer.android.com/studio/debug/device-file-explorer>`_. Its path will be something
like `/data/data/your.application.id/files`.

ssl
---

The :any:`ssl` module is configured to use a copy of the CA bundle from `certifi
<https://pypi.org/project/certifi/>`_ version 2024.8.30. The system CA store is
not used.

sys
---

:any:`sys.stdout` and :any:`sys.stderr` are redirected to the `Logcat
<https://developer.android.com/studio/debug/am-logcat.html>`__ with the tags
`python.stdout` and `python.stderr` respectively. These streams are line-buffered by
default: if you want to disable that, use :any:`io.TextIOWrapper.reconfigure` to set
`write_through=True`.

This redirection does not affect the native stdout and stderr streams, which may be used
by non-Python libraries. If you want to redirect them as well, see
`AndroidPlatform.redirectStdioToLogcat
<java/com/chaquo/python/android/AndroidPlatform.html#redirectStdioToLogcat()>`_.

:any:`sys.stdin` always returns EOF. If you want to run some code which takes
interactive text input, have a look at the `console app template
<https://github.com/chaquo/chaquopy-console>`_.


.. _android-studio-plugin:

Android Studio plugin
=====================

To add Python editing suppport to the Android Studio user interface, you may optionally install
the "Python Community Edition" plugin. However, Chaquopy isn't integrated with this plugin, so
you'll see the warning "No Python interpreter configured for the module", and your code will
probably display many error indicators such as "Unresolved reference" and "No module named".
These are harmless: just go ahead and run your app, and if there really is an error, the
details will be displayed in the `Logcat <https://stackoverflow.com/a/23353174>`__.
